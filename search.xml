<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>可持久化数据结构（一）：trie</title>
      <link href="/2023/03/19/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96trie/"/>
      <url>/2023/03/19/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96trie/</url>
      
        <content type="html"><![CDATA[<p>近日学习了可持久化数据结构,因此总结一下。那就从可持久化trie开始吧。  </p><h4 id="可持久化trie的用途"><a href="#可持久化trie的用途" class="headerlink" title="可持久化trie的用途"></a>可持久化trie的用途</h4><p>正常的trie树可以解决一些字符串问题和最大异或和问题，但是对于一些特殊的问题，例如有插入操作和询问区间最大异或和轮流出现的问题，正常的trie树就难以解决。这个时候就轮到可持久化trie树出场了。  </p><h4 id="可持久化trie的思路"><a href="#可持久化trie的思路" class="headerlink" title="可持久化trie的思路"></a>可持久化trie的思路</h4><ol><li>对于每次插入，我们可以构造一棵新的trie树（复制原有的trie树，再进行插入操作），这样我们就得到了不同版本的trie树。<strong>但是</strong>，每次插入操作我们都要遍历（复制）一整棵trie树，这样无论是时间复杂度还是空间复杂度都是极高的。</li><li>上述思路虽不可取，但有很大的启发性。我们思考能不能在上述思路的基础上进行优化呢？答案是完全可以！每次插入，我们只会在trie树中新增一条链，而其余部分保持不变。保持不变的这一部分我们可以在新树中指向它们，而不是全部复制过来，这样一来，我们构造新trie树的成本大大降低了（只需要新增一条链，外加几个指向原有trie树的操作）。这就是可持久化trie的思路<strong>（这段话看不懂没关系，理解下面的图就好了）</strong></li></ol><h4 id="正常的trie（左图）和可持久化trie（右图）的对比"><a href="#正常的trie（左图）和可持久化trie（右图）的对比" class="headerlink" title="正常的trie（左图）和可持久化trie（右图）的对比"></a>正常的trie（左图）和可持久化trie（右图）的对比</h4><p><img src="https://s2.loli.net/2023/03/19/LHinIsjvzkb68PO.jpg"></p><p>版本2的指向操作似乎并没有减少什么操作，但是版本3的指向操作（1次）帮我们节省了4次复制操作。以此类推，这棵树越复杂，节省的操作次数越多，时间复杂度和空间复杂度大大降低，从而变成可行的操作。<br><strong>重要的事情说三遍，指向操作是可持久化的核心操作！！！</strong><br><strong>重要的事情说三遍，指向操作是可持久化的核心操作！！！</strong><br><strong>重要的事情说三遍，指向操作是可持久化的核心操作！！！</strong>   </p><p>还有一个问题就是，我们如何知道一个点是哪一个版本的呢？其实很简单，我们开一个<code>maxId[N]</code>数组来记录就可以了。</p><h4 id="纸上谈兵没用，我们直接看题"><a href="#纸上谈兵没用，我们直接看题" class="headerlink" title="纸上谈兵没用，我们直接看题"></a>纸上谈兵没用，我们直接看题</h4><p>我们选取的是<a href="https://www.acwing.com/problem/content/258/">Acwing256最大异或和</a>。<br>#####题面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定一个非负整数序列 a，初始长度为 N。有 M个操作，有以下两种操作类型：A x：添加操作，表示在序列末尾添加</span><br><span class="line">一个数 x，序列的长度 N 增大 1。Q l r x：询问操作，你需要找到一个位置 p，满足 l≤p≤r，使得：a[p] xor a[p+1]</span><br><span class="line"> xor … xor a[N] xor x最大，输出这个最大值。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行包含两个整数 N，M，含义如问题描述所示。</span><br><span class="line">第二行包含 N 个非负整数，表示初始的序列 A。</span><br><span class="line">接下来 M行，每行描述一个操作，格式如题面所述。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">每个询问操作输出一个整数，表示询问的答案。</span><br><span class="line"></span><br><span class="line">每个答案占一行。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line">N,M≤3×105,0≤a[i]≤107。</span><br><span class="line"></span><br><span class="line">输入样例：</span><br><span class="line">5 5</span><br><span class="line">2 6 4 3 6</span><br><span class="line">A 1 </span><br><span class="line">Q 3 5 4 </span><br><span class="line">A 4 </span><br><span class="line">Q 5 7 0 </span><br><span class="line">Q 3 6 6 </span><br><span class="line">输出样例：</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>可以按照上面的思路思考一下 <strong>（指向操作是重点）</strong>。  </p><p>ac代码附详细注释</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6e5</span> + <span class="number">10</span>, M = N * <span class="number">25</span>;</span><br><span class="line"><span class="type">int</span> tr[M][<span class="number">2</span>], root[N], s[N], maxId[M], idx;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> k, <span class="type">int</span> p, <span class="type">int</span> q)</span><span class="comment">//i代表当前版本号，k代表当前深度 = 树的深度 - k，</span></span></span><br><span class="line"><span class="function"><span class="comment">//p代表上个版本的trie树，q代表新版本的trie树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;<span class="comment">//已到达叶节点</span></span><br><span class="line">        maxId[q] = i;<span class="comment">//位于新增的链中，所以赋值当前版本号</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> v = s[i] &gt;&gt; k &amp; <span class="number">1</span>;<span class="comment">//不同于新增链的节点</span></span><br><span class="line">    <span class="keyword">if</span> (p) tr[q][v ^ <span class="number">1</span>] = tr[p][v ^ <span class="number">1</span>];<span class="comment">//指向操作!!!</span></span><br><span class="line">    tr[q][v] = ++idx;<span class="comment">//新增结点，与正常trie树新增节点相同</span></span><br><span class="line">    <span class="built_in">insert</span>(i, k - <span class="number">1</span>, tr[p][v], tr[q][v]);</span><br><span class="line">    maxId[q] = <span class="built_in">max</span>(maxId[tr[q][<span class="number">0</span>]], maxId[tr[q][<span class="number">1</span>]]);<span class="comment">//子节点可能存在以前版本的点（因为</span></span><br><span class="line">    <span class="comment">//加了指向操作）,所以要对两个子节点的版本取max才是该节点的版本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> C, <span class="type">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">23</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> v = C &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (maxId[tr[p][v ^ <span class="number">1</span>]] &gt;= l) p = tr[p][v ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> p = tr[p][v];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C ^ s[maxId[p]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);<span class="comment">//加快读写</span></span><br><span class="line">    </span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    maxId[<span class="number">0</span>] = <span class="number">-1</span>;<span class="comment">//第0个版本没有任何节点，赋值-1是为了防止版本错误</span></span><br><span class="line">    root[<span class="number">0</span>] = ++idx;<span class="comment">//根节点是一个空的trie节点，因此是++idx</span></span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, root[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] ^ x;<span class="comment">//记录的是前缀异或和，每次s[i] ^ s[n] ^ 给定的x 相当于从</span></span><br><span class="line">        <span class="comment">// i + 1 个数一直异或到最后一个数 (l &lt;= i &lt;= r)</span></span><br><span class="line">        root[i] = ++idx;</span><br><span class="line">        <span class="built_in">insert</span>(i, <span class="number">23</span>, root[i - <span class="number">1</span>], root[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        <span class="type">int</span> l, r, x;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            n++;</span><br><span class="line">            s[n] = s[n - <span class="number">1</span>] ^ x;</span><br><span class="line">            root[n] = ++idx;</span><br><span class="line">            <span class="built_in">insert</span>(n, <span class="number">23</span>, root[n - <span class="number">1</span>], root[n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(root[r - <span class="number">1</span>], s[n] ^ x, l - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="至此，完结撒花！！！"><a href="#至此，完结撒花！！！" class="headerlink" title="至此，完结撒花！！！"></a>至此，完结撒花！！！</h4>]]></content>
      
      
      <categories>
          
          <category> 可持久化数据结构 </category>
          
          <category> 可持久化trie </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trie </tag>
            
            <tag> 可持久化数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/16/hello-world/"/>
      <url>/2023/03/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>演示文稿</title>
      <link href="/2023/03/07/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF/"/>
      <url>/2023/03/07/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Welcome to my blog!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文章效果展示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 演示 </tag>
            
            <tag> 展示 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
