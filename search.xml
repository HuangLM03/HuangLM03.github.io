<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单源最短路</title>
      <link href="/2023/05/14/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
      <url>/2023/05/14/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="单源最短路"><a href="#单源最短路" class="headerlink" title="单源最短路"></a>单源最短路</h4><p>给定一个带权有向图G &#x3D;（V,E），其中每条边的权是一个实数。另外，还给定V中的一个顶点，称为源。要计算从源到其他所有各顶点的最短路径长度。这里的长度就是指路上各边权之和。这个问题通常称为单源最短路径问题。</p><h4 id="Dijkstra算法O-n-2"><a href="#Dijkstra算法O-n-2" class="headerlink" title="Dijkstra算法O(n^2)"></a>Dijkstra算法O(n^2)</h4><p>该算法是一种基于贪心的做法：从起点集合出发，每次寻找离起点所属集合最近的点，并标记该点已经属于起点集合，然后用该点的出边更新所有还不属于起点集合的点离起点集合的距离，直到所有的点都属于起点集合。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dist数组是点离起点集合的距离，g[i][j]是两个点之间的距离</span></span><br><span class="line"><span class="built_in">Dijkstra</span>(<span class="type">int</span> beg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memest</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> );</span><br><span class="line">    dist[beg] = <span class="number">0</span>;<span class="comment">//起点到自己的距离为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="comment">//如果j不属于起点集合，并且t点离起点集合比j更远，就将t更新为j</span></span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j])) &#123;</span><br><span class="line">                t = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">true</span>;<span class="comment">//标记t属于起点集合</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">          <span class="comment">//更新离起点的距离</span></span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], dist[t] + g[t][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dijkstra算法堆优化（nlogn）"><a href="#Dijkstra算法堆优化（nlogn）" class="headerlink" title="Dijkstra算法堆优化（nlogn）"></a>Dijkstra算法堆优化（nlogn）</h4><p>很显然，上述算法固然正确，但是时间复杂度太高，一旦数据范围过大，很容易超时。因此，我们要对其进行优化。<br>优化方法：利用STL里面的priority_queue对找离起点集合最近的点这一步进行优化，这一步由O(n)优化为O(logn)。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapDijkstra</span><span class="params">(<span class="type">int</span> beg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[beg] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123; dist[beg], beg&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> x = t.first, y = t.second;</span><br><span class="line">        <span class="keyword">if</span> (st[y]) <span class="keyword">continue</span>;</span><br><span class="line">        st[y] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//更新</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[y]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="comment">//简化代码</span></span><br><span class="line">            <span class="type">int</span> j = edge[i].to;</span><br><span class="line">            <span class="comment">//如果更小就更新，同时将更新过的点入队列</span></span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[j] + edge[i].val) &#123;</span><br><span class="line">                dist[j] = dist[j] + edge[i].val;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123; dist[j], j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中场总结"><a href="#中场总结" class="headerlink" title="中场总结"></a>中场总结</h4><p>Dijkstra算法的限制：不能出现负权边。<br>原因：该算法是基于贪心的做法，如果出现负权边则无法保证当前更新到的点是距离起点最小的点，如下图所示：<br><img src="https://s2.loli.net/2023/05/15/LMRAbesDWzdcZqV.png"><br>上述推导是很直观的推导，但是不严谨，更严谨的数学推导请自行google。</p><p>接下来我们将会介绍解决带负权边的最短路问题的算法：bellman-ford算法和SPFA算法，SPFA算法是bellman-ford算法的优化。因此，绝大部分能用bellman-ford算法解决的问题都可以用SPFA算法解决，且效率更佳，只有小部分问题，例如最多经过k条边的最短路问题无法用SPFA算法解决。</p><h4 id="bellman-ford算法O-nm"><a href="#bellman-ford算法O-nm" class="headerlink" title="bellman-ford算法O(nm)"></a>bellman-ford算法O(nm)</h4><p>该算法的主要思路是对所有边进行n - 1轮松弛操作，为在一个含有n个顶点的图中，任意两点之间的最短路径最多包含n-1边，除非该图有负权回路。换句话说，第1轮在对所有的边进行松弛后，得到的是起点最多经过一条边到达其他顶点的最短距离；第2轮在对所有的边进行松弛后，得到的是起点最多经过两条边到达其他顶点的最短距离；第3轮在对所有的边进行松弛后，得到的是起点最多经过三条边到达其他顶点的最短距离……那如果进行n - 1轮松弛操作后仍然可以进行松弛怎么办？答案是：此时我们可以判断出在这个图中有负权回路，部分点到起点的最短路无解。<br>也因为这个思路，这个算法可以解决最多经过k条边的最短路问题。<br><strong>特别注意</strong>，在记录最短路时，要用两个数组记录，<code>last[]</code>用来记录上一轮的最短路，<code>next[]</code>用来记录当前轮的最短路。更新的时候要用<code>last[]</code>来更新<code>next[]</code>，否则会出现一次更新两条边的情况，导致该算法无法求最多经过k条边的最短路问题（但是依旧可以求无边数限制的最短路问题）。下图举例一种简单的情况证明上述结论。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dist数组代表当前轮点离起点的距离，last数组代表上一轮点离起点的距离</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, val;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="type">void</span> bellman-ford(<span class="type">int</span> beg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化操作</span></span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[beg] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="type">int</span> a = edge[i].from, b = edge[i].to, c = edge[i].val;</span><br><span class="line">            <span class="comment">//用上一轮的最短路更新这一轮的最短路，防止一次更新两条边。</span></span><br><span class="line">            dist[a] = <span class="built_in">min</span>(dist[a], last[b] + c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将上一轮的最短路赋值给last数组</span></span><br><span class="line">        <span class="built_in">memcpy</span>(last, dist, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SPFA算法一般O-m-，最坏O-nm"><a href="#SPFA算法一般O-m-，最坏O-nm" class="headerlink" title="SPFA算法一般O(m)，最坏O(nm)"></a>SPFA算法一般O(m)，最坏O(nm)</h4><p>SPFA算法是对bellman-ford算法优化得到的，但是有得必有失，优化后不能用于求最多经过k条边的最短路问题。从bellman-ford算法代码中可以看出，很多点的dist不会更新但却被遍历了。直觉告诉我们，这里有很大的优化空间。而SPFA算法正是这样做的：创建一个队列，将dist被更新的点入队，依次从队头取出元素，遍历该元素的所有出边（连向的点），看能否更新这些点的dist，若可以，则将其入队，否则跳过。<br>下面简要说明为什么可以跳过dist不会被更新的点。</p><ul><li>情况一：该点的dist已被更新过，即<code>dist[i] = last[j] + edge_val</code>。此时dist已是最小值，除非该点所在路径上出现负权回路。</li><li>情况二：last[j] &#x3D; INF。此时无论dist[i]更新与否，都不影响判定：i、j都不可达。</li></ul><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> st[N]; <span class="comment">//用于判断元素是否处于队列中</span></span><br><span class="line"><span class="type">int</span> h[N], idx;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> to, val, nxt;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(beg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[beg] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(beg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历出边</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = edge[i].nxt) &#123;</span><br><span class="line">            <span class="type">int</span> j = edge[i].to;</span><br><span class="line">            <span class="comment">//判断是否更新t元素出边所连的点的dist</span></span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + edge[i].val) &#123;</span><br><span class="line">                dist[j] = dist[t] + edge[i].val;</span><br><span class="line">                <span class="comment">//重复入队只会增加时间损耗</span></span><br><span class="line">                <span class="keyword">if</span> (!st[j]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Dijkstra算法一般用于正权图中，稠密图用朴素版，稀疏图用堆优化版；有负权边的图中一般用spfa算法，除非题目有边数限制才会用bellman-ford算法。</p>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
          <category> 单源最短路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 单源最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL常用容器</title>
      <link href="/2023/04/24/STL%E5%B8%B8%E7%94%A8%E5%AE%B9%E5%99%A8/"/>
      <url>/2023/04/24/STL%E5%B8%B8%E7%94%A8%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>size和empty这两个函数所有的STL容器都支持<br>除了queue,priority_queue,stack之外，其他STL容器都有clear函数<br>begin和end一般都是左 [ 右 )</p><h4 id="vector（长度可变的数组）（变长基于倍增的思想）"><a href="#vector（长度可变的数组）（变长基于倍增的思想）" class="headerlink" title="vector（长度可变的数组）（变长基于倍增的思想）"></a>vector（长度可变的数组）（变长基于倍增的思想）</h4><p>声明方式：<br>       vector<int> a;&#x2F;&#x2F;定义了一个名字为a的vector数组<br>       同理，也可以<br>        struct _Node{int i;int j;}Node;<br>        vector<Node> a;<br>函数：<br>    a.size()&#x2F;&#x2F;表示vector的长度<br>    a.begin()&#x2F;&#x2F;；表示vector第一个元素的下标<br>    注意：<em>a.begin()与a[0]的作用相同（前提是a非空）<br>    a.end()&#x2F;&#x2F;表示vector最后一个元素的后一个位置的下标<br>    a.empty()&#x2F;&#x2F;表示a是否为空，返回值类型为bool，如空为true，不空为false<br>    a.clear()&#x2F;&#x2F;表示将a清空<br>    a.front()&#x2F;&#x2F;表示将a的第一个元素返回，相当于</em>a.begin()和a[0]<br>    a.back()&#x2F;&#x2F;表示将a的最后一个元素返回，同上<br>    a.earse(unique(a.begin(),a.end(),a.end())&#x2F;&#x2F;将位于两指针中间的元素删去<br>    (important)  a.pop_back()&#x2F;&#x2F;表示删去a的最后一个元素<br>               a.push_back(x)&#x2F;&#x2F;表示在a的最后一个元素后面加入一个新的元素x<br>                注意：vector在末尾插入数据的时间复杂度为O（1），但在vector头部插入数据的时间复杂度为O（n）<br>迭代器：<br>    迭代器就像STL容器的“指针”，可以用星号*操作符解除引用。<br>一个保存int的vector的迭代器声明方法为：vector<int>::iterator it;<br>    vector的迭代器是“随机访问迭代器”，可以把vector的迭代器与一个整数相加减，<br>其行为和指针的移动类似。可以把vector的两个迭代器相减，<br>其结果也和指针相减类似，得到两个迭代器对应下标之间的距离。</p><h4 id="queue（注意：只能从队尾插入，从队头弹出）"><a href="#queue（注意：只能从队尾插入，从队头弹出）" class="headerlink" title="queue（注意：只能从队尾插入，从队头弹出）"></a>queue（注意：只能从队尾插入，从队头弹出）</h4><p>声明方式：<br>    queue<int> q;<br>    struct rec{…}; queue<rec> q;                        &#x2F;&#x2F;结构体rec中必须定义小于号<br>    priority_queue<int> q;                              &#x2F;&#x2F; 大根堆，即每次返回最大值<br>    priority_queue&lt;int, vector<int>, greater<int>&gt; q;   &#x2F;&#x2F; 小根堆，即每次返回最小值<br>    priority_queue&lt;pair&lt;int, int&gt;&gt;q;<br>    注意：如果想定义一个结构体的优先队列，必须要重载小于号<br>        具体格式为：<br>        struct Rec{int a;int b;bool operator&lt; (const Rec&amp; t){ return a &lt; t.a;}};<br>        priority_quene<Rec> d;<br>        同理如果要定义一个小根堆则必须要重载大于号（将上述格式中的‘&lt;’换成’&gt;’即可）<br>函数：<br>    循环队列 queue<br>        push()&#x2F;&#x2F;从队尾插入<br>        pop()&#x2F;&#x2F;从队头弹出<br>        front()&#x2F;&#x2F;返回队头元素<br>        back()&#x2F;&#x2F;返回队尾元素<br>    优先队列 priority_queue<br>        psuh()&#x2F;&#x2F;插入一个数<br>        top()&#x2F;&#x2F;取出队列中的最大值<br>        pop()&#x2F;&#x2F;删除最大值</p><p>清空队列的方法：<br>    q&#x3D;queue<int>();</p><h4 id="stack-与queue类似，但数据先进先出"><a href="#stack-与queue类似，但数据先进先出" class="headerlink" title="stack(与queue类似，但数据先进先出)"></a>stack(与queue类似，但数据先进先出)</h4><p>声明方法：与queue类似</p><p>函数：<br>    push()&#x2F;&#x2F;向栈顶插入元素<br>    pop()&#x2F;&#x2F;弹出（删除）栈顶元素<br>    top()&#x2F;&#x2F;返回栈顶的元素</p><h4 id="deque-双端队列-vector和queue的组合：与vector相比，deque在头部增删元素仅需要-O-1-O-1-的时间；"><a href="#deque-双端队列-vector和queue的组合：与vector相比，deque在头部增删元素仅需要-O-1-O-1-的时间；" class="headerlink" title="deque 双端队列(vector和queue的组合：与vector相比，deque在头部增删元素仅需要 O(1)O(1) 的时间；"></a>deque 双端队列(vector和queue的组合：与vector相比，deque在头部增删元素仅需要 O(1)O(1) 的时间；</h4><pre><code>        与queue相比，deque像数组一样支持随机访问。）</code></pre><p>声明方法：与上面类似</p><p>函数：<br>    a.begin()  a.end()&#x2F;&#x2F;左闭右开，用法同vector<br>    a.front()  a.back()&#x2F;&#x2F;分别表示将队列的第一个元素和最后一个元素返回<br>    a.pop_back()  a.pop_front()&#x2F;&#x2F;分别表示将队列的第一个元素和最后一个元素删去<br>    a.clear()&#x2F;&#x2F;表示清空队列</p><h4 id="set-底层实现为红黑树"><a href="#set-底层实现为红黑树" class="headerlink" title="set (底层实现为红黑树)"></a>set (底层实现为红黑树)</h4><pre><code>头文件set主要包括set和multiset两个容器，分别是“有序集合”和“有序多重集合”，</code></pre><p>即前者的元素不能重复，而后者可以包含若干个相等的元素。<br>set和multiset的内部实现是一棵红黑树，它们支持的函数基本相同。<br>声明方法：<br>    set<int> a;&#x2F;&#x2F;元素不可以重复<br>    multiset<int> b;&#x2F;&#x2F;元素可以重复<br>    因为set内部需要进行比较，所以自己定义结构体时需要重载小于号<br>    具体方式：<br>        struct Rec{int x;int y;<br>                    bool operator&lt; (const Rec&amp; t)const<br>                    { return x &lt; t.x;}<br>                };<br>        set<Rec> c;</p><p>函数：<br>    size&#x2F;empty&#x2F;clear与vector类似<br>    begin()&#x2F;end()&#x2F;&#x2F;返回集合的首、尾迭代器，时间复杂度均为 O(1)<br>    &#x2F;&#x2F;s.begin()是指向集合中最小元素的迭代器。s.end()是指向集合中最大元素的下一个位置的迭代器。<br>    &#x2F;&#x2F;换言之，就像vector一样，是一个“前闭后开”的形式。因此– s.end()是指向集合中最大元素的迭代器。<br>&#96;insert()&#x2F;&#x2F;s.insert(x)把一个元素x插入到集合s中，时间复杂度为 O(logn)O(logn)。<br>    &#x2F;&#x2F;在set中，若元素已存在，则不会重复插入该元素，对集合的状态无影响。<br>    find()&#x2F;&#x2F;s.find(x)在集合s中查找等于x的元素，并返回指向该元素的迭代器。若不存在，则返回s.end()。时间复杂度为 O(logn)<br>    lower_bound()&#x2F;upper_bound()&#x2F;&#x2F;这两个函数的用法与find类似，但查找的条件略有不同，时间复杂度为 O(logn)。<br>    &#x2F;&#x2F;s.lower_bound(x)查找大于等于x的元素中最小的一个，并返回指向该元素的迭代器。<br>    &#x2F;&#x2F;s.upper_bound(x)查找大于x的元素中最小的一个，并返回指向该元素的迭代器。<br>    &#x2F;&#x2F;注意这两个函数，有坑！！！一个是大于等于，一个是大于（而不能想当然地认为一个是大于等于，一个是小于）<br>    &#x2F;&#x2F;erase()&#x2F;&#x2F;设it是一个迭代器，s.erase(it)从s中删除迭代器it指向的元素，时间复杂度为 O(logn)。<br>    &#x2F;&#x2F;设x是一个元素，s.erase(x)从s中删除所有等于x的元素，时间复杂度为 O(k+logn)，其中 kk 是被删除的元素个数。<br>    &#x2F;&#x2F;count()&#x2F;s.count(x)返回集合s中等于x的元素个数，时间复杂度为 O(k+logn)O(k+logn)，其中 kk 为元素x的个数。</p><p>迭代器：<br>    set和multiset的迭代器称为“双向访问迭代器”，<br>不支持“随机访问”，支持星号*解除引用，仅支持++和–两个与算术相关的操作。<br>设it是一个迭代器，例如set<int>::iterator it;<br>若把it ++，则it会指向“下一个”元素。<br>这里的“下一个”元素是指在元素从小到大排序的结果中，排在it下一名的元素。<br>同理，若把it –，则it将会指向排在“上一个”的元素。</p><h4 id="unordered-set-底层实现为哈希表"><a href="#unordered-set-底层实现为哈希表" class="headerlink" title="unordered_set(底层实现为哈希表)"></a>unordered_set(底层实现为哈希表)</h4><pre><code>所有的用法都和set相同，只比set少了lower_bound()和upper_bound()两个函数和迭代器的++，--</code></pre><p>（因为unordered_set是无序的）<br>    时间复杂相对set来说较低<br>同理也存在unordered_multiset</p><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>map容器是一个键值对key-value的映射，<br>其内部实现是一棵以key为关键码的红黑树。<br>Map的key和value可以是任意类型，其中key必须定义小于号运算符</p><h4 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h4><pre><code>时间复杂度都是O（1）的，与map相比（map的操作都是O（log n）），</code></pre><p>只少了二分和迭代器的++，–，但实际上一般不会用map做二分。<br>函数：<br>    size&#x2F;empty&#x2F;clear&#x2F;begin&#x2F;end均与set类似。<br>    insert&#x2F;erase与set类似，但其参数均是pair&lt;key_type, value_type&gt;。<br>    find&#x2F;&#x2F;h.find(x)在变量名为h的map中查找key为x的二元组。</p><p>不知道什么分类：<br>    []操作符&#x2F;&#x2F;h[key]返回key映射的value的引用，时间复杂度为 O(logn)。<br>    []操作符是map最吸引人的地方。我们可以很方便地通过h[key]来得到key对应的value，<br>还可以对h[key]进行赋值操作，改变key对应的value。</p><h4 id="pair-二元组"><a href="#pair-二元组" class="headerlink" title="pair 二元组"></a>pair 二元组</h4><p>声明方法：<br>    pair&lt;int,string&gt; a;<br>    a&#x3D;{3,”yxc”}<br>    a&#x3D;make_pair(4,”abc”);<br>输出方法：<br>    cout&lt;&lt;a.first&lt;&lt;’ ‘&lt;&lt;a.second&lt;&lt;endl;</p><h4 id="bitset-压位"><a href="#bitset-压位" class="headerlink" title="bitset 压位"></a>bitset 压位</h4><p>定义：<br>    bitset<length> a;</p><p>操作：<br>    ~,&amp;,|,^<br>    &gt;&gt;,&lt;&lt;<br>    &#x3D;&#x3D;,!&#x3D;<br>    []</p><p>函数：<br>    count &#x2F;&#x2F;返回有多少个1<br>    any() &#x2F;&#x2F;判断是否至少有一个1<br>    none() &#x2F;&#x2F;判断是否全为0<br>    set() &#x2F;&#x2F;把所有位置换为1<br>    set(k,v) &#x2F;&#x2F;把第k位变成v<br>    reset() &#x2F;&#x2F;把所有位变成0<br>    flip() &#x2F;&#x2F;等价于~<br>    flip（k） &#x2F;&#x2F;把第k位取反</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><h4 id="常用库函数"><a href="#常用库函数" class="headerlink" title="常用库函数"></a>常用库函数</h4><p>使用下列函数要引头文件：#include <algorithm></p><h4 id="reverse（O（n））"><a href="#reverse（O（n））" class="headerlink" title="reverse（O（n））"></a>reverse（O（n））</h4><p>作用：将数组或vector翻转<br>写法：reverse(a.begin(),a.end())<br>    注意左 [ 右 ) </p><h4 id="unique-有返回值，返回值为新数组的end（）"><a href="#unique-有返回值，返回值为新数组的end（）" class="headerlink" title="unique 有返回值，返回值为新数组的end（）"></a>unique 有返回值，返回值为新数组的end（）</h4><p>作用：去重（前提：保证相同元素挨在一起），把所有不同的数据放在数组的最前面<br>写法：unique( a.begin(),a,end())</p><h4 id="random-shuffle"><a href="#random-shuffle" class="headerlink" title="random_shuffle"></a>random_shuffle</h4><p>作用：将数组打乱从而获得随机数组<br>写法：vector<int> a;<br>    srand(time(0))&#x2F;&#x2F;为了每次打乱得不同<br>    rand_shuffle(a.begin(),a.end())</p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>作用：将数组排序<br>写法：vector<int> a;<br>    sort(a.begin(),a.end())&#x2F;&#x2F;默认从小到大排序<br>    sort(a.begin(),a.end(),greater<int>())&#x2F;&#x2F;从大到小排序<br>    &#x2F;&#x2F;自定义排序方法<br>    bool cmp(int a,int b){<br>        return a&gt;b;&#x2F;&#x2F;如果a&gt;b，那么a应该排到b的前面<br>    }&#x2F;&#x2F;a是否应该排到b的前面<br>    sort(a.begin(),a.end(),cmp)<br>    &#x2F;&#x2F;神奇的排结构体（和上面一样）<br>    &#x2F;&#x2F;如果不想每次都定义一个比较函数，可以在结构体内重载小于号（大于号）</p><h4 id="lower-bound-x2F-upper-bound-二分（要求已经排好序）"><a href="#lower-bound-x2F-upper-bound-二分（要求已经排好序）" class="headerlink" title="lower_bound&#x2F;upper_bound 二分（要求已经排好序）"></a>lower_bound&#x2F;upper_bound 二分（要求已经排好序）</h4><p>lower_bound的第三个参数传入一个元素x，<br>在两个迭代器（指针）指定的部分上执行二分查找，<br>返回指向第一个大于等于x的元素的位置的迭代器（指针）。<br>upper_bound的用法和lower_bound大致相同，<br>唯一的区别是查找第一个大于x的元素。当然，两个迭代器（指针）指定的部分应该是提前排好序的。</p><p>在有序int数组（元素存放在下标1 ~ n）中查找大于等于x的最小整数的下标：<br>int i &#x3D; lower_bound(a + 1, a + 1 + n, x) - a;<br>在有序vector<int>中查找小于等于x的最大整数（假设一定存在）：<br>int y &#x3D; *–upper_bound(a.begin(), a.end(), x);</p><p>如果无法找到则返回-1.</p>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2023/04/23/%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/04/23/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近在面向对象程序设计一课中学习了有关链表的内容，因此写这篇博客巩固一下从类的角度写链表的方法。</p><h4 id="链表用途"><a href="#链表用途" class="headerlink" title="链表用途"></a>链表用途</h4><h4 id="链表原理简介"><a href="#链表原理简介" class="headerlink" title="链表原理简介"></a>链表原理简介</h4><ul><li>链表分为单向链表，双向链表还有循环链表等，这里以单链表为例介绍原理。</li></ul><ol><li>链表就是将一些孤立的类对象串联在一起，创建类对象不难，难点是如何将这些类对象串联起来。</li><li>回忆学习过的知识，我们学习过的索引方式只有两种：数组的下标索引和指针索引。很显然，数组的下标索引不如指针索引方便，因此，我这里利用指针进行索引；</li><li>我们先建立一个简单的类:<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name, id;</span><br><span class="line">    <span class="type">int</span> classNum;</span><br><span class="line">    Student* next;<span class="comment">//要指向int类型的变量需要int*，与此类似，要指向Student对象需要Student*。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>具体如何操作看下图（图片比单调的文字描述更让人易懂）<br><img src="https://s2.loli.net/2023/04/24/f5vEJ6x7hLQCROB.jpg"></li><li>但是，我们的链表还有很多问题，例如：我如何找到这个链表在哪里？<br>答案很显然，在new第一个节点的时候我们多new一个head节点就可以了（如图<br><img src="https://s2.loli.net/2023/04/24/3r4GXBVyMJ9FRmq.jpg"></li><li>接下来是链表如何通过头节点进行插入和删除操作。<br>插入操作分为在head节点后面插入和末尾点插入还有中间插入，我们以最普遍的中间插入举例（如图<br><img src="https://s2.loli.net/2023/04/24/m2Hcb4i8GtejJAM.jpg"><br>然后是删除操作（依旧是如图<br><img src="https://s2.loli.net/2023/04/24/5r7tkpWFOKvIhE4.jpg"><br>简短的代码<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Student* p = i;</span><br><span class="line">Student* tmp = i-&gt;next;<span class="comment">//这一步是为了delete</span></span><br><span class="line">p-&gt;next = tmp-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> tmp;</span><br></pre></td></tr></table></figure></li><li>以上便是单链表的简单原理了，下面给出完整的代码</li></ol><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p>更新：完善一下代码格式</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">StuClass</span>;</span><br><span class="line">    string name;</span><br><span class="line">    Student* next;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Student</span>(string na) : <span class="built_in">name</span>(na), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">        <span class="built_in">Student</span>() </span><br><span class="line">        &#123;</span><br><span class="line">            name = <span class="string">&quot;NO ONE&quot;</span>;</span><br><span class="line">            next = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StuClass</span> &#123;</span><br><span class="line">    Student* head;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">StuClass</span>(<span class="type">int</span> n) : <span class="built_in">sum</span>(n) </span><br><span class="line">        &#123;</span><br><span class="line">            head = <span class="keyword">new</span> Student;</span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">StuClass</span>();</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">record</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">lookThrough</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(Student*)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(string)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">StuClass::~<span class="built_in">StuClass</span>()</span><br><span class="line">&#123;</span><br><span class="line">    Student* p = head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> head;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        Student* tmp = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StuClass::record</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sum; i++) &#123;</span><br><span class="line">        string name;</span><br><span class="line">        cin &gt;&gt; name;</span><br><span class="line">        Student* now = <span class="keyword">new</span> <span class="built_in">Student</span>(name);</span><br><span class="line">        <span class="built_in">insert</span>(now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StuClass::lookThrough</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student* p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        cout &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StuClass::insert</span><span class="params">(Student* now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student* p = head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (head-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        head-&gt;next = now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;next) &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = now;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StuClass::erase</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student* p = head-&gt;next;</span><br><span class="line">    Student* pre = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p-&gt;name != name) pre = p, p = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (pre == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        head-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NOT FOUND! &quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        pre-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">StuClass <span class="title">list</span><span class="params">(n)</span></span>;</span><br><span class="line">    list.<span class="built_in">record</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除前：&quot;</span>;</span><br><span class="line">    list.<span class="built_in">lookThrough</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    list.<span class="built_in">erase</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除后：&quot;</span>;</span><br><span class="line">    list.<span class="built_in">lookThrough</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一些话"><a href="#一些话" class="headerlink" title="一些话"></a>一些话</h4><p>链表还有双向链表和循环链表等等，但原理和单链表几乎相同，有时间再更新。</p><h4 id="补充1"><a href="#补充1" class="headerlink" title="补充1"></a>补充1</h4><ul><li>在头节点后面插入与一般的插入有些许不同，我们需要更新一下head节点指向的位置，即：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Student* now = <span class="keyword">new</span> Student;</span><br><span class="line">now-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = now;</span><br></pre></td></tr></table></figure></li></ul><h4 id="补充2"><a href="#补充2" class="headerlink" title="补充2"></a>补充2</h4><ul><li>循环链表的实现方式：与普通链表类似，但判断是否到链表的末端不是用<code>p-&gt;next != nullptr</code>，而是修改为<code>p-&gt;next != head-&gt;next</code>；其次，我们在创建第一个节点的时候要让它指向自己（因为一个节点也是循环链表），即：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Node* head = <span class="literal">nullptr</span>;</span><br><span class="line">……</span><br><span class="line">Node* now = <span class="keyword">new</span> Node;</span><br><span class="line">now = &#123; value, <span class="literal">nullptr</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    haed = <span class="keyword">new</span> Node;</span><br><span class="line">    head-&gt;next = now;</span><br><span class="line">    now-&gt;next = now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="补充3"><a href="#补充3" class="headerlink" title="补充3"></a>补充3</h4><p>关于链表反转的代码，原理如图：<br><img src="https://s2.loli.net/2023/04/24/v2XabgmewPrQWAE.png"></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//now表示当前节点，fa表示当前节点的父节点，返回值为链表最末尾的节点的地址</span></span><br><span class="line"><span class="function">Node* <span class="title">dfs</span><span class="params">(Node* now, Node* fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果当前节点为空，则上一个节点为最后一个节点，因此返回上一个节点的地址</span></span><br><span class="line">    <span class="keyword">if</span> (now == <span class="literal">nullptr</span>) <span class="keyword">return</span> fa;</span><br><span class="line">    </span><br><span class="line">    Node* tmp = <span class="built_in">dfs</span>(now-&gt;next, now);</span><br><span class="line">    <span class="comment">//反转，当前节点的下一个节点为当前节点的父节点</span></span><br><span class="line">    now-&gt;next = fa;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line"><span class="built_in">dfs</span>(head, <span class="literal">nullptr</span>);<span class="comment">//head节点的上一个节点为空</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure><h4 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h4>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可持久化数据结构（二）：可持久化权值线段树</title>
      <link href="/2023/03/24/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2023/03/24/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这是可持久化数据结构的第二部分，介绍可持久化权值线段树（主席树）。这个数据结构的名字很多（好像没有比较统一的叫法，也是我孤陋寡闻），为了简洁，下面以主席树代替。</p><h4 id="主席树的用途"><a href="#主席树的用途" class="headerlink" title="主席树的用途"></a>主席树的用途</h4><ul><li>维护一段区间内的数的出现次数</li><li>在题目中一般用来求第K小（大）数</li></ul><h4 id="主席树和一般线段树的区别"><a href="#主席树和一般线段树的区别" class="headerlink" title="主席树和一般线段树的区别"></a>主席树和一般线段树的区别</h4><ol><li>主席树一般采用动态开点（应该是）建树，而一般线段树采用堆的方式建树。</li><li>主席树每个节点的l和r指向该节点的左右儿子，一般线段树每个节点的l和r表示该节点表示的区间的左右端点。</li></ol><h4 id="主席树的原理简单介绍（以求第k小为例）"><a href="#主席树的原理简单介绍（以求第k小为例）" class="headerlink" title="主席树的原理简单介绍（以求第k小为例）"></a>主席树的原理简单介绍（以<a href="https://www.acwing.com/activity/content/problem/content/1718/">求第k小</a>为例）</h4><p>每次插入一个数的时候，整棵树只有一条分支会被更新，其余部分保持不变。那么我们可以将上一个版本的树复制过来（与<a href="https://huanglm03.github.io/2023/03/19/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96trie/">可持久化trie</a>的指向操作类似, 不懂的可以点击链接前往查看关于指向操作的内容），复制完后再进行插入操作。这样，我们就得到了不同版本的树了。</p><h4 id="但是我们怎么通过不同版本的树求第K小的数呢？"><a href="#但是我们怎么通过不同版本的树求第K小的数呢？" class="headerlink" title="但是我们怎么通过不同版本的树求第K小的数呢？"></a>但是我们怎么通过不同版本的树求第K小的数呢？</h4><p>下文中的值域均指离散化后的值域。<br>不妨假设p &lt; q，在第p个版本到第q个版本之间，我们一定插入了q - p + 1个数，两颗树值域内的数的数量相减，结果也一定为q - p + 1（不要问为什么了，p版本插入的数量就是比q版本少啊，不要像我一样傻）。既然在整棵树的值域（假设为1<del>n），那么在区间 l</del>r（1 &lt;&#x3D; l &lt;&#x3D; r &lt;&#x3D; n)是否也有这样的性质呢？答案是肯定的。那么，查询的时候我们只需要像普通线段树那样查询就可以了。</p><h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定长度为 N 的整数序列 A，下标为 1∼N。现在要执行 M 次操作，其中第 i 次操作为给出三个整数 li,ri,ki，</span><br><span class="line">求 A[li],A[li+1],…,A[ri] (即 A 的下标区间 [li,ri])中第 ki 小的数是多少。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行包含两个整数 N 和 M。</span><br><span class="line">第二行包含 N 个整数，表示整数序列 A。</span><br><span class="line">接下来 M 行，每行包含三个整数 li,ri,ki，用以描述第 i 次操作。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">对于每次操作输出一个结果，表示在该次操作中，第 k 小的数的数值。</span><br><span class="line">每个结果占一行。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line">N≤105,M≤104,|A[i]|≤109</span><br><span class="line">输入样例：</span><br><span class="line">7 3</span><br><span class="line">1 5 2 6 3 7 4</span><br><span class="line">2 5 3</span><br><span class="line">4 4 1</span><br><span class="line">1 7 3</span><br><span class="line">输出样例：</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> root[N], a[N],idx;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), x) - nums.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = ++idx;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> p;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tr[p].l = <span class="built_in">build</span>(l, mid), tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> q = ++idx;</span><br><span class="line">    tr[q] = tr[p];</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[q].cnt++;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) tr[q].l = <span class="built_in">insert</span>(tr[p].l, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span> tr[q].r = <span class="built_in">insert</span>(tr[p].r, mid + <span class="number">1</span>, r, x);</span><br><span class="line">    tr[q].cnt = tr[tr[q].l].cnt + tr[tr[q].r].cnt;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> q, <span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt = tr[tr[q].l].cnt - tr[tr[p].l].cnt;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= cnt) <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].l, tr[p].l, l, mid, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].r, tr[p].r, mid + <span class="number">1</span>, r, k - cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()), nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i&lt;= n; i++) &#123;</span><br><span class="line">        root[i] = <span class="built_in">insert</span>(root[i - <span class="number">1</span>], <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="built_in">find</span>(a[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l, r, x;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">        cout &lt;&lt; nums[<span class="built_in">query</span>(root[r], root[l - <span class="number">1</span>], <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, x)] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 可持久化数据结构 </category>
          
          <category> 主席树/权值线段树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
            <tag> 可持久化权值线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可持久化数据结构（一）：trie</title>
      <link href="/2023/03/19/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96trie/"/>
      <url>/2023/03/19/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96trie/</url>
      
        <content type="html"><![CDATA[<p>近日学习了可持久化数据结构,因此总结一下。那就从可持久化trie开始吧。  </p><h4 id="可持久化trie的用途"><a href="#可持久化trie的用途" class="headerlink" title="可持久化trie的用途"></a>可持久化trie的用途</h4><p>正常的trie树可以解决一些字符串问题和最大异或和问题，但是对于一些特殊的问题，例如有插入操作和询问区间最大异或和轮流出现的问题，正常的trie树就难以解决。这个时候就轮到可持久化trie树出场了。  </p><h4 id="可持久化trie的思路"><a href="#可持久化trie的思路" class="headerlink" title="可持久化trie的思路"></a>可持久化trie的思路</h4><ol><li>对于每次插入，我们可以构造一棵新的trie树（复制原有的trie树，再进行插入操作），这样我们就得到了不同版本的trie树。<strong>但是</strong>，每次插入操作我们都要遍历（复制）一整棵trie树，这样无论是时间复杂度还是空间复杂度都是极高的。</li><li>上述思路虽不可取，但有很大的启发性。我们思考能不能在上述思路的基础上进行优化呢？答案是完全可以！每次插入，我们只会在trie树中新增一条链，而其余部分保持不变。保持不变的这一部分我们可以在新树中指向它们，而不是全部复制过来，这样一来，我们构造新trie树的成本大大降低了（只需要新增一条链，外加几个指向原有trie树的操作）。这就是可持久化trie的思路<strong>（这段话看不懂没关系，理解下面的图就好了）</strong></li></ol><h4 id="正常的trie（左图）和可持久化trie（右图）的对比"><a href="#正常的trie（左图）和可持久化trie（右图）的对比" class="headerlink" title="正常的trie（左图）和可持久化trie（右图）的对比"></a>正常的trie（左图）和可持久化trie（右图）的对比</h4><p><img src="https://s2.loli.net/2023/03/19/LHinIsjvzkb68PO.jpg"></p><p>版本2的指向操作似乎并没有减少什么操作，但是版本3的指向操作（1次）帮我们节省了4次复制操作。以此类推，这棵树越复杂，节省的操作次数越多，时间复杂度和空间复杂度大大降低，从而变成可行的操作。<br><strong>重要的事情说三遍，指向操作是可持久化的核心操作！！！</strong><br><strong>重要的事情说三遍，指向操作是可持久化的核心操作！！！</strong><br><strong>重要的事情说三遍，指向操作是可持久化的核心操作！！！</strong>   </p><p>还有一个问题就是，我们如何知道一个点是哪一个版本的呢？其实很简单，我们开一个<code>maxId[N]</code>数组来记录就可以了。</p><h4 id="纸上谈兵没用，我们直接看题"><a href="#纸上谈兵没用，我们直接看题" class="headerlink" title="纸上谈兵没用，我们直接看题"></a>纸上谈兵没用，我们直接看题</h4><p>我们选取的是<a href="https://www.acwing.com/problem/content/258/">Acwing256最大异或和</a>。<br>#####题面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定一个非负整数序列 a，初始长度为 N。有 M个操作，有以下两种操作类型：A x：添加操作，表示在序列末尾添加</span><br><span class="line">一个数 x，序列的长度 N 增大 1。Q l r x：询问操作，你需要找到一个位置 p，满足 l≤p≤r，使得：a[p] xor a[p+1]</span><br><span class="line"> xor … xor a[N] xor x最大，输出这个最大值。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行包含两个整数 N，M，含义如问题描述所示。</span><br><span class="line">第二行包含 N 个非负整数，表示初始的序列 A。</span><br><span class="line">接下来 M行，每行描述一个操作，格式如题面所述。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">每个询问操作输出一个整数，表示询问的答案。</span><br><span class="line"></span><br><span class="line">每个答案占一行。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line">N,M≤3×105,0≤a[i]≤107。</span><br><span class="line"></span><br><span class="line">输入样例：</span><br><span class="line">5 5</span><br><span class="line">2 6 4 3 6</span><br><span class="line">A 1 </span><br><span class="line">Q 3 5 4 </span><br><span class="line">A 4 </span><br><span class="line">Q 5 7 0 </span><br><span class="line">Q 3 6 6 </span><br><span class="line">输出样例：</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>可以按照上面的思路思考一下 <strong>（指向操作是重点）</strong>。  </p><p>ac代码附详细注释</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6e5</span> + <span class="number">10</span>, M = N * <span class="number">25</span>;</span><br><span class="line"><span class="type">int</span> tr[M][<span class="number">2</span>], root[N], s[N], maxId[M], idx;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> k, <span class="type">int</span> p, <span class="type">int</span> q)</span><span class="comment">//i代表当前版本号，k代表当前深度 = 树的深度 - k，</span></span></span><br><span class="line"><span class="function"><span class="comment">//p代表上个版本的trie树，q代表新版本的trie树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;<span class="comment">//已到达叶节点</span></span><br><span class="line">        maxId[q] = i;<span class="comment">//位于新增的链中，所以赋值当前版本号</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> v = s[i] &gt;&gt; k &amp; <span class="number">1</span>;<span class="comment">//不同于新增链的节点</span></span><br><span class="line">    <span class="keyword">if</span> (p) tr[q][v ^ <span class="number">1</span>] = tr[p][v ^ <span class="number">1</span>];<span class="comment">//指向操作!!!</span></span><br><span class="line">    tr[q][v] = ++idx;<span class="comment">//新增结点，与正常trie树新增节点相同</span></span><br><span class="line">    <span class="built_in">insert</span>(i, k - <span class="number">1</span>, tr[p][v], tr[q][v]);</span><br><span class="line">    maxId[q] = <span class="built_in">max</span>(maxId[tr[q][<span class="number">0</span>]], maxId[tr[q][<span class="number">1</span>]]);<span class="comment">//子节点可能存在以前版本的点（因为</span></span><br><span class="line">    <span class="comment">//加了指向操作）,所以要对两个子节点的版本取max才是该节点的版本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> C, <span class="type">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">23</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> v = C &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (maxId[tr[p][v ^ <span class="number">1</span>]] &gt;= l) p = tr[p][v ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> p = tr[p][v];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C ^ s[maxId[p]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);<span class="comment">//加快读写</span></span><br><span class="line">    </span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    maxId[<span class="number">0</span>] = <span class="number">-1</span>;<span class="comment">//第0个版本没有任何节点，赋值-1是为了防止版本错误</span></span><br><span class="line">    root[<span class="number">0</span>] = ++idx;<span class="comment">//根节点是一个空的trie节点，因此是++idx</span></span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, root[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] ^ x;<span class="comment">//记录的是前缀异或和，每次s[i] ^ s[n] ^ 给定的x 相当于从</span></span><br><span class="line">        <span class="comment">// i + 1 个数一直异或到最后一个数 (l &lt;= i &lt;= r)</span></span><br><span class="line">        root[i] = ++idx;</span><br><span class="line">        <span class="built_in">insert</span>(i, <span class="number">23</span>, root[i - <span class="number">1</span>], root[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        <span class="type">int</span> l, r, x;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            n++;</span><br><span class="line">            s[n] = s[n - <span class="number">1</span>] ^ x;</span><br><span class="line">            root[n] = ++idx;</span><br><span class="line">            <span class="built_in">insert</span>(n, <span class="number">23</span>, root[n - <span class="number">1</span>], root[n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(root[r - <span class="number">1</span>], s[n] ^ x, l - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="至此，完结撒花！！！"><a href="#至此，完结撒花！！！" class="headerlink" title="至此，完结撒花！！！"></a>至此，完结撒花！！！</h4>]]></content>
      
      
      <categories>
          
          <category> 可持久化数据结构 </category>
          
          <category> 可持久化trie </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trie </tag>
            
            <tag> 可持久化数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>演示文稿</title>
      <link href="/2023/03/07/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF/"/>
      <url>/2023/03/07/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Welcome to my blog!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文章效果展示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 演示 </tag>
            
            <tag> 展示 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
