<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>链表</title>
      <link href="/2023/04/23/%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/04/23/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近在面向对象程序设计一课中学习了有关链表的内容，因此写这篇博客巩固一下从类的角度写链表的方法。</p><h4 id="链表用途"><a href="#链表用途" class="headerlink" title="链表用途"></a>链表用途</h4><h4 id="链表原理简介"><a href="#链表原理简介" class="headerlink" title="链表原理简介"></a>链表原理简介</h4><ul><li>链表分为单向链表，双向链表还有循环链表等，这里以单链表为例介绍原理。</li></ul><ol><li>链表就是将一些孤立的类对象串联在一起，创建类对象不难，难点是如何将这些类对象串联起来。</li><li>回忆学习过的知识，我们学习过的索引方式只有两种：数组的下标索引和指针索引。很显然，数组的下标索引不如指针索引方便，因此，我这里利用指针进行索引；</li><li>我们先建立一个简单的类:<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name, id;</span><br><span class="line">    <span class="type">int</span> classNum;</span><br><span class="line">    Student* next;<span class="comment">//要指向int类型的变量需要int*，与此类似，要指向Student对象需要Student*。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>具体如何操作看下图（图片比单调的文字描述更让人易懂）<br><img src="https://s2.loli.net/2023/04/24/f5vEJ6x7hLQCROB.jpg"></li><li>但是，我们的链表还有很多问题，例如：我如何找到这个链表在哪里？<br>答案很显然，在new第一个节点的时候我们多new一个head节点就可以了（如图<br><img src="https://s2.loli.net/2023/04/24/3r4GXBVyMJ9FRmq.jpg"></li><li>接下来是链表如何通过头节点进行插入和删除操作。<br>插入操作分为在head节点后面插入和末尾点插入还有中间插入，我们以最普遍的中间插入举例（如图<br><img src="https://s2.loli.net/2023/04/24/m2Hcb4i8GtejJAM.jpg"><br>然后是删除操作（依旧是如图<br><img src="https://s2.loli.net/2023/04/24/5r7tkpWFOKvIhE4.jpg"><br>简短的代码<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Student* p = i;</span><br><span class="line">Student* tmp = i-&gt;next;<span class="comment">//这一步是为了delete</span></span><br><span class="line">p-&gt;next = tmp-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> tmp;</span><br></pre></td></tr></table></figure></li><li>以上便是单链表的简单原理了，下面给出完整的代码</li></ol><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p>更新：完善一下代码格式</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">StuClass</span>;</span><br><span class="line">    string name;</span><br><span class="line">    Student* next;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Student</span>(string na) : <span class="built_in">name</span>(na), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">        <span class="built_in">Student</span>() </span><br><span class="line">        &#123;</span><br><span class="line">            name = <span class="string">&quot;NO ONE&quot;</span>;</span><br><span class="line">            next = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StuClass</span> &#123;</span><br><span class="line">    Student* head;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">StuClass</span>(<span class="type">int</span> n) : <span class="built_in">sum</span>(n) </span><br><span class="line">        &#123;</span><br><span class="line">            head = <span class="keyword">new</span> Student;</span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">StuClass</span>();</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">record</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">lookThrough</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(Student*)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(string)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">StuClass::~<span class="built_in">StuClass</span>()</span><br><span class="line">&#123;</span><br><span class="line">    Student* p = head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> head;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        Student* tmp = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StuClass::record</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sum; i++) &#123;</span><br><span class="line">        string name;</span><br><span class="line">        cin &gt;&gt; name;</span><br><span class="line">        Student* now = <span class="keyword">new</span> <span class="built_in">Student</span>(name);</span><br><span class="line">        <span class="built_in">insert</span>(now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StuClass::lookThrough</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student* p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        cout &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StuClass::insert</span><span class="params">(Student* now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student* p = head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (head-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        head-&gt;next = now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;next) &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = now;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StuClass::erase</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student* p = head-&gt;next;</span><br><span class="line">    Student* pre = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p-&gt;name != name) pre = p, p = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (pre == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        head-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NOT FOUND! &quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        pre-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">StuClass <span class="title">list</span><span class="params">(n)</span></span>;</span><br><span class="line">    list.<span class="built_in">record</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除前：&quot;</span>;</span><br><span class="line">    list.<span class="built_in">lookThrough</span>();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    list.<span class="built_in">erase</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除后：&quot;</span>;</span><br><span class="line">    list.<span class="built_in">lookThrough</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一些话"><a href="#一些话" class="headerlink" title="一些话"></a>一些话</h4><p>链表还有双向链表和循环链表等等，但原理和单链表几乎相同，有时间再更新。</p><h4 id="补充1"><a href="#补充1" class="headerlink" title="补充1"></a>补充1</h4><ul><li>在头节点后面插入与一般的插入有些许不同，我们需要更新一下head节点指向的位置，即：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Student* now = <span class="keyword">new</span> Student;</span><br><span class="line">now-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = now;</span><br></pre></td></tr></table></figure></li></ul><h4 id="补充2"><a href="#补充2" class="headerlink" title="补充2"></a>补充2</h4><ul><li>循环链表的实现方式：与普通链表类似，但判断是否到链表的末端不是用<code>p-&gt;next != nullptr</code>，而是修改为<code>p-&gt;next != head-&gt;next</code>；其次，我们在创建第一个节点的时候要让它指向自己（因为一个节点也是循环链表），即：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Node* head = <span class="literal">nullptr</span>;</span><br><span class="line">……</span><br><span class="line">Node* now = <span class="keyword">new</span> Node;</span><br><span class="line">now = &#123; value, <span class="literal">nullptr</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    haed = <span class="keyword">new</span> Node;</span><br><span class="line">    head-&gt;next = now;</span><br><span class="line">    now-&gt;next = now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h4>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可持久化数据结构（二）：可持久化权值线段树</title>
      <link href="/2023/03/24/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2023/03/24/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这是可持久化数据结构的第二部分，介绍可持久化权值线段树（主席树）。这个数据结构的名字很多（好像没有比较统一的叫法，也是我孤陋寡闻），为了简洁，下面以主席树代替。</p><h4 id="主席树的用途"><a href="#主席树的用途" class="headerlink" title="主席树的用途"></a>主席树的用途</h4><ul><li>维护一段区间内的数的出现次数</li><li>在题目中一般用来求第K小（大）数</li></ul><h4 id="主席树和一般线段树的区别"><a href="#主席树和一般线段树的区别" class="headerlink" title="主席树和一般线段树的区别"></a>主席树和一般线段树的区别</h4><ol><li>主席树一般采用动态开点（应该是）建树，而一般线段树采用堆的方式建树。</li><li>主席树每个节点的l和r指向该节点的左右儿子，一般线段树每个节点的l和r表示该节点表示的区间的左右端点。</li></ol><h4 id="主席树的原理简单介绍（以求第k小为例）"><a href="#主席树的原理简单介绍（以求第k小为例）" class="headerlink" title="主席树的原理简单介绍（以求第k小为例）"></a>主席树的原理简单介绍（以<a href="https://www.acwing.com/activity/content/problem/content/1718/">求第k小</a>为例）</h4><p>每次插入一个数的时候，整棵树只有一条分支会被更新，其余部分保持不变。那么我们可以将上一个版本的树复制过来（与<a href="https://huanglm03.github.io/2023/03/19/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96trie/">可持久化trie</a>的指向操作类似, 不懂的可以点击链接前往查看关于指向操作的内容），复制完后再进行插入操作。这样，我们就得到了不同版本的树了。</p><h4 id="但是我们怎么通过不同版本的树求第K小的数呢？"><a href="#但是我们怎么通过不同版本的树求第K小的数呢？" class="headerlink" title="但是我们怎么通过不同版本的树求第K小的数呢？"></a>但是我们怎么通过不同版本的树求第K小的数呢？</h4><p>下文中的值域均指离散化后的值域。<br>不妨假设p &lt; q，在第p个版本到第q个版本之间，我们一定插入了q - p + 1个数，两颗树值域内的数的数量相减，结果也一定为q - p + 1（不要问为什么了，p版本插入的数量就是比q版本少啊，不要像我一样傻）。既然在整棵树的值域（假设为1<del>n），那么在区间 l</del>r（1 &lt;&#x3D; l &lt;&#x3D; r &lt;&#x3D; n)是否也有这样的性质呢？答案是肯定的。那么，查询的时候我们只需要像普通线段树那样查询就可以了。</p><h4 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定长度为 N 的整数序列 A，下标为 1∼N。现在要执行 M 次操作，其中第 i 次操作为给出三个整数 li,ri,ki，</span><br><span class="line">求 A[li],A[li+1],…,A[ri] (即 A 的下标区间 [li,ri])中第 ki 小的数是多少。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行包含两个整数 N 和 M。</span><br><span class="line">第二行包含 N 个整数，表示整数序列 A。</span><br><span class="line">接下来 M 行，每行包含三个整数 li,ri,ki，用以描述第 i 次操作。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">对于每次操作输出一个结果，表示在该次操作中，第 k 小的数的数值。</span><br><span class="line">每个结果占一行。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line">N≤105,M≤104,|A[i]|≤109</span><br><span class="line">输入样例：</span><br><span class="line">7 3</span><br><span class="line">1 5 2 6 3 7 4</span><br><span class="line">2 5 3</span><br><span class="line">4 4 1</span><br><span class="line">1 7 3</span><br><span class="line">输出样例：</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> root[N], a[N],idx;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), x) - nums.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = ++idx;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> p;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tr[p].l = <span class="built_in">build</span>(l, mid), tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> q = ++idx;</span><br><span class="line">    tr[q] = tr[p];</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[q].cnt++;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) tr[q].l = <span class="built_in">insert</span>(tr[p].l, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span> tr[q].r = <span class="built_in">insert</span>(tr[p].r, mid + <span class="number">1</span>, r, x);</span><br><span class="line">    tr[q].cnt = tr[tr[q].l].cnt + tr[tr[q].r].cnt;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> q, <span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt = tr[tr[q].l].cnt - tr[tr[p].l].cnt;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= cnt) <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].l, tr[p].l, l, mid, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].r, tr[p].r, mid + <span class="number">1</span>, r, k - cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()), nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i&lt;= n; i++) &#123;</span><br><span class="line">        root[i] = <span class="built_in">insert</span>(root[i - <span class="number">1</span>], <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="built_in">find</span>(a[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l, r, x;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">        cout &lt;&lt; nums[<span class="built_in">query</span>(root[r], root[l - <span class="number">1</span>], <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, x)] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 可持久化数据结构 </category>
          
          <category> 主席树/权值线段树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
            <tag> 可持久化权值线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可持久化数据结构（一）：trie</title>
      <link href="/2023/03/19/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96trie/"/>
      <url>/2023/03/19/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96trie/</url>
      
        <content type="html"><![CDATA[<p>近日学习了可持久化数据结构,因此总结一下。那就从可持久化trie开始吧。  </p><h4 id="可持久化trie的用途"><a href="#可持久化trie的用途" class="headerlink" title="可持久化trie的用途"></a>可持久化trie的用途</h4><p>正常的trie树可以解决一些字符串问题和最大异或和问题，但是对于一些特殊的问题，例如有插入操作和询问区间最大异或和轮流出现的问题，正常的trie树就难以解决。这个时候就轮到可持久化trie树出场了。  </p><h4 id="可持久化trie的思路"><a href="#可持久化trie的思路" class="headerlink" title="可持久化trie的思路"></a>可持久化trie的思路</h4><ol><li>对于每次插入，我们可以构造一棵新的trie树（复制原有的trie树，再进行插入操作），这样我们就得到了不同版本的trie树。<strong>但是</strong>，每次插入操作我们都要遍历（复制）一整棵trie树，这样无论是时间复杂度还是空间复杂度都是极高的。</li><li>上述思路虽不可取，但有很大的启发性。我们思考能不能在上述思路的基础上进行优化呢？答案是完全可以！每次插入，我们只会在trie树中新增一条链，而其余部分保持不变。保持不变的这一部分我们可以在新树中指向它们，而不是全部复制过来，这样一来，我们构造新trie树的成本大大降低了（只需要新增一条链，外加几个指向原有trie树的操作）。这就是可持久化trie的思路<strong>（这段话看不懂没关系，理解下面的图就好了）</strong></li></ol><h4 id="正常的trie（左图）和可持久化trie（右图）的对比"><a href="#正常的trie（左图）和可持久化trie（右图）的对比" class="headerlink" title="正常的trie（左图）和可持久化trie（右图）的对比"></a>正常的trie（左图）和可持久化trie（右图）的对比</h4><p><img src="https://s2.loli.net/2023/03/19/LHinIsjvzkb68PO.jpg"></p><p>版本2的指向操作似乎并没有减少什么操作，但是版本3的指向操作（1次）帮我们节省了4次复制操作。以此类推，这棵树越复杂，节省的操作次数越多，时间复杂度和空间复杂度大大降低，从而变成可行的操作。<br><strong>重要的事情说三遍，指向操作是可持久化的核心操作！！！</strong><br><strong>重要的事情说三遍，指向操作是可持久化的核心操作！！！</strong><br><strong>重要的事情说三遍，指向操作是可持久化的核心操作！！！</strong>   </p><p>还有一个问题就是，我们如何知道一个点是哪一个版本的呢？其实很简单，我们开一个<code>maxId[N]</code>数组来记录就可以了。</p><h4 id="纸上谈兵没用，我们直接看题"><a href="#纸上谈兵没用，我们直接看题" class="headerlink" title="纸上谈兵没用，我们直接看题"></a>纸上谈兵没用，我们直接看题</h4><p>我们选取的是<a href="https://www.acwing.com/problem/content/258/">Acwing256最大异或和</a>。<br>#####题面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定一个非负整数序列 a，初始长度为 N。有 M个操作，有以下两种操作类型：A x：添加操作，表示在序列末尾添加</span><br><span class="line">一个数 x，序列的长度 N 增大 1。Q l r x：询问操作，你需要找到一个位置 p，满足 l≤p≤r，使得：a[p] xor a[p+1]</span><br><span class="line"> xor … xor a[N] xor x最大，输出这个最大值。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行包含两个整数 N，M，含义如问题描述所示。</span><br><span class="line">第二行包含 N 个非负整数，表示初始的序列 A。</span><br><span class="line">接下来 M行，每行描述一个操作，格式如题面所述。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">每个询问操作输出一个整数，表示询问的答案。</span><br><span class="line"></span><br><span class="line">每个答案占一行。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line">N,M≤3×105,0≤a[i]≤107。</span><br><span class="line"></span><br><span class="line">输入样例：</span><br><span class="line">5 5</span><br><span class="line">2 6 4 3 6</span><br><span class="line">A 1 </span><br><span class="line">Q 3 5 4 </span><br><span class="line">A 4 </span><br><span class="line">Q 5 7 0 </span><br><span class="line">Q 3 6 6 </span><br><span class="line">输出样例：</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>可以按照上面的思路思考一下 <strong>（指向操作是重点）</strong>。  </p><p>ac代码附详细注释</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6e5</span> + <span class="number">10</span>, M = N * <span class="number">25</span>;</span><br><span class="line"><span class="type">int</span> tr[M][<span class="number">2</span>], root[N], s[N], maxId[M], idx;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> k, <span class="type">int</span> p, <span class="type">int</span> q)</span><span class="comment">//i代表当前版本号，k代表当前深度 = 树的深度 - k，</span></span></span><br><span class="line"><span class="function"><span class="comment">//p代表上个版本的trie树，q代表新版本的trie树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;<span class="comment">//已到达叶节点</span></span><br><span class="line">        maxId[q] = i;<span class="comment">//位于新增的链中，所以赋值当前版本号</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> v = s[i] &gt;&gt; k &amp; <span class="number">1</span>;<span class="comment">//不同于新增链的节点</span></span><br><span class="line">    <span class="keyword">if</span> (p) tr[q][v ^ <span class="number">1</span>] = tr[p][v ^ <span class="number">1</span>];<span class="comment">//指向操作!!!</span></span><br><span class="line">    tr[q][v] = ++idx;<span class="comment">//新增结点，与正常trie树新增节点相同</span></span><br><span class="line">    <span class="built_in">insert</span>(i, k - <span class="number">1</span>, tr[p][v], tr[q][v]);</span><br><span class="line">    maxId[q] = <span class="built_in">max</span>(maxId[tr[q][<span class="number">0</span>]], maxId[tr[q][<span class="number">1</span>]]);<span class="comment">//子节点可能存在以前版本的点（因为</span></span><br><span class="line">    <span class="comment">//加了指向操作）,所以要对两个子节点的版本取max才是该节点的版本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> C, <span class="type">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">23</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> v = C &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (maxId[tr[p][v ^ <span class="number">1</span>]] &gt;= l) p = tr[p][v ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> p = tr[p][v];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C ^ s[maxId[p]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);<span class="comment">//加快读写</span></span><br><span class="line">    </span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    maxId[<span class="number">0</span>] = <span class="number">-1</span>;<span class="comment">//第0个版本没有任何节点，赋值-1是为了防止版本错误</span></span><br><span class="line">    root[<span class="number">0</span>] = ++idx;<span class="comment">//根节点是一个空的trie节点，因此是++idx</span></span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, root[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] ^ x;<span class="comment">//记录的是前缀异或和，每次s[i] ^ s[n] ^ 给定的x 相当于从</span></span><br><span class="line">        <span class="comment">// i + 1 个数一直异或到最后一个数 (l &lt;= i &lt;= r)</span></span><br><span class="line">        root[i] = ++idx;</span><br><span class="line">        <span class="built_in">insert</span>(i, <span class="number">23</span>, root[i - <span class="number">1</span>], root[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        <span class="type">int</span> l, r, x;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            n++;</span><br><span class="line">            s[n] = s[n - <span class="number">1</span>] ^ x;</span><br><span class="line">            root[n] = ++idx;</span><br><span class="line">            <span class="built_in">insert</span>(n, <span class="number">23</span>, root[n - <span class="number">1</span>], root[n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(root[r - <span class="number">1</span>], s[n] ^ x, l - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="至此，完结撒花！！！"><a href="#至此，完结撒花！！！" class="headerlink" title="至此，完结撒花！！！"></a>至此，完结撒花！！！</h4>]]></content>
      
      
      <categories>
          
          <category> 可持久化数据结构 </category>
          
          <category> 可持久化trie </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trie </tag>
            
            <tag> 可持久化数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>演示文稿</title>
      <link href="/2023/03/07/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF/"/>
      <url>/2023/03/07/%E6%BC%94%E7%A4%BA%E6%96%87%E7%A8%BF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Welcome to my blog!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文章效果展示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 演示 </tag>
            
            <tag> 展示 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
